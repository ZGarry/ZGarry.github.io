const t=JSON.parse('{"key":"v-88a07046","path":"/posts/%E6%8A%80%E6%9C%AF/1%20%E8%B6%8B%E4%BA%8E%E6%B7%B7%E4%B9%B1%E7%9A%84%E4%BB%A3%E7%A0%81.html","title":"#1 趋于混乱的代码","lang":"en-US","frontmatter":{"description":"#1 趋于混乱的代码 生命，以负熵为食。 本文从熵的视角谈一谈对生活中一些事务的看法。 代码趋于混乱 代码是天然的趋于混乱的。我想用软件界一些常见的思维和词汇，以熵的视角来谈谈这个问题。 面向对象：用对象来解决混乱问题 面向对象对解决混乱度提出的解决方案是，将行为和数据赋予给对象。进而，有更加清晰的语意，并且代码也是天然分散的（不要小瞧这点，这很重要）；行为也会在更加适合解决它的那个对象中解决。但是，随意命名的对象，对象之间彼此不必要的耦合，导致了代码还是很多，混乱度还是很高。","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/posts/%E6%8A%80%E6%9C%AF/1%20%E8%B6%8B%E4%BA%8E%E6%B7%B7%E4%B9%B1%E7%9A%84%E4%BB%A3%E7%A0%81.html"}],["meta",{"property":"og:site_name","content":"入川为王"}],["meta",{"property":"og:title","content":"#1 趋于混乱的代码"}],["meta",{"property":"og:description","content":"#1 趋于混乱的代码 生命，以负熵为食。 本文从熵的视角谈一谈对生活中一些事务的看法。 代码趋于混乱 代码是天然的趋于混乱的。我想用软件界一些常见的思维和词汇，以熵的视角来谈谈这个问题。 面向对象：用对象来解决混乱问题 面向对象对解决混乱度提出的解决方案是，将行为和数据赋予给对象。进而，有更加清晰的语意，并且代码也是天然分散的（不要小瞧这点，这很重要）；行为也会在更加适合解决它的那个对象中解决。但是，随意命名的对象，对象之间彼此不必要的耦合，导致了代码还是很多，混乱度还是很高。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-09-09T05:33:09.000Z"}],["meta",{"property":"article:author","content":"入川为王"}],["meta",{"property":"article:modified_time","content":"2024-09-09T05:33:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"#1 趋于混乱的代码\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-09T05:33:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"入川为王\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"代码趋于混乱","slug":"代码趋于混乱","link":"#代码趋于混乱","children":[{"level":3,"title":"面向对象：用对象来解决混乱问题","slug":"面向对象-用对象来解决混乱问题","link":"#面向对象-用对象来解决混乱问题","children":[]},{"level":3,"title":"Spring出世：IOC模式下的熵[logn*n->logn]","slug":"spring出世-ioc模式下的熵-logn-n-logn","link":"#spring出世-ioc模式下的熵-logn-n-logn","children":[]},{"level":3,"title":"微服务：服务拆分直接从代码量级的角度降低复杂度","slug":"微服务-服务拆分直接从代码量级的角度降低复杂度","link":"#微服务-服务拆分直接从代码量级的角度降低复杂度","children":[]}]}],"git":{"createdTime":1725859989000,"updatedTime":1725859989000,"contributors":[{"name":"ZGarry","email":"1160564525@qq.com","commits":1}]},"readingTime":{"minutes":3.53,"words":1059},"filePathRelative":"posts/技术/#1 趋于混乱的代码.md","localizedDate":"September 9, 2024","excerpt":"<h1> #1 趋于混乱的代码</h1>\\n<blockquote>\\n<p>生命，以负熵为食。</p>\\n</blockquote>\\n<p>本文从熵的视角谈一谈对生活中一些事务的看法。</p>\\n<h2> 代码趋于混乱</h2>\\n<p>代码是天然的趋于混乱的。我想用软件界一些常见的思维和词汇，以熵的视角来谈谈这个问题。</p>\\n<h3> <strong>面向对象：用对象来解决混乱问题</strong></h3>\\n<p>面向对象对解决混乱度提出的解决方案是，将行为和数据赋予给对象。进而，有更加清晰的语意，并且代码也是天然分散的（不要小瞧这点，这很重要）；行为也会在更加适合解决它的那个对象中解决。但是，<strong>随意命名的对象</strong>，<strong>对象之间彼此不必要的耦合</strong>，导致了代码还是很多，混乱度还是很高。</p>","autoDesc":true}');export{t as data};
